#!/bin/python

import subprocess;
import json;
import time;

DATABASES_FILE = "/etc/sysconfig/couchdb_databases";
NODES_FILE = "/etc/sysconfig/couchdb_nodes";
COUCHDB_HTTP_PORT = 5984;

def initializeReplication():
    waitUntilSelfIsReachable();
    databasesToRepicate = getSectionInFile(DATABASES_FILE, "database");
    otherIps = getIpsOtherNodesInCluster();
    replicateDatabasesTo(databasesToRepicate, otherIps);
    
def replicateDatabasesTo(databaseNames, ipsToReplicateTo):
    for targetIp in ipsToReplicateTo:
        for database in databaseNames:
            if not hasDatabase(getOwnIp(), database):
                createDatabase(getOwnIp(), database);
            if not isReplicationLinkSet(getOwnIp(), targetIp, database) and isCouchdbServerReachable(targetIp):
                setReplicationLink(getOwnIp(), targetIp, database);
                setReplicationLink(targetIp, getOwnIp(), database);

def getReplicationCommand(sourceIp, targetIp, databaseName):
    communicateToUrl = createUrl(sourceIp, COUCHDB_HTTP_PORT, "_replicate");
    sourceUrl = createUrl(sourceIp, COUCHDB_HTTP_PORT, databaseName);
    targetUrl = createUrl(targetIp, COUCHDB_HTTP_PORT, databaseName);
    result = ["curl", "-H", "Content-Type:application/json"];
    result += ["-X", "POST", communicateToUrl]; 
    minusDArgument = "{\"source\": \"" + sourceUrl + "\", \"target\": \"" + targetUrl + "\",";
    minusDArgument += "\"create_target\": true, \"continuous\": true}";
    result += ["-d", minusDArgument];
    return result;

# Path parameter without leading slash
def createUrl(ip, port, path):
    return "http://" +  ip + ":" + str(port) + "/" + path;

def hasDatabase(ip, databaseName):
    url = createUrl(ip, COUCHDB_HTTP_PORT, "_all_dbs");
    command = ["curl", "-X", "GET", url];
    output = executeShellCommand(command);
    parsedOutput = json.loads(output);
    return databaseName in parsedOutput;
    
def setReplicationLink(sourceIp, targetIp, databaseName):
    command = getReplicationCommand(sourceIp, targetIp, databaseName);
    output = executeShellCommand(command);
    parsedOutput = json.loads(output);
    if not "ok" in parsedOutput:
        raise Exception("Replication link could not be set: (" + sourceIp + "=>" + targetIp + ":" + databaseName + ")");
    
def isReplicationLinkSet(sourceIp, targetIp, databaseName):
    url = createUrl(sourceIp, COUCHDB_HTTP_PORT, "_active_tasks");
    sourceUrl = createUrl(sourceIp, COUCHDB_HTTP_PORT, databaseName + "/");
    targetUrl = createUrl(targetIp, COUCHDB_HTTP_PORT, databaseName + "/");
    command = ["curl", "-X", "GET", url];
    output = executeShellCommand(command);
    listOfTasks = json.loads(output);
    for itemOfList in listOfTasks:
        if itemOfList["type"] == "replication" and \
            itemOfList["source"] == sourceUrl and \
            itemOfList["target"] == targetUrl:
            return True;
    return False;

def createDatabase(ip, databaseName):
    url = createUrl(ip, COUCHDB_HTTP_PORT, databaseName);
    command = ["curl", "-X", "PUT", url];
    output = executeShellCommand(command);
    parsedOutput = json.loads(output);
    if not parsedOutput["ok"]:
        raise Exception("Database could not be created");

def executeShellCommand(command):
    process = subprocess.Popen(command, stdout = subprocess.PIPE);
    output = process.communicate()[0];
    if process.poll() != 0:
        commandAsString = " ".join(command);
        raise Exception("Execution of command failed (" + commandAsString + ")");
    return output;

def getIpsOtherNodesInCluster():
    ipsInCluster = getIpsInCluster();
    ownIp = getOwnIp();
    ipsInCluster.remove(ownIp);
    return ipsInCluster;
    
def getOwnIp():
    resultset = getSectionInFile(NODES_FILE, "self");
    if len(resultset) == 0:
        raise Exception("Own ip not foudn in config file: " + NODES_FILE);
    if len(resultset) > 1:
        raise Exception("More than one value for own ip found in config file: " + NODES_FILE);
    return resultset.pop();
    
def getIpsInCluster():
    return getSectionInFile(NODES_FILE, "node");
    
def getSectionInFile(pathToFile, label):
    filestream = open(pathToFile, "r");
    result = set();
    for line in filestream:
        if line.find(label) != -1:
            resultItem = line.strip(" \n");
            resultItem = resultItem.split(' ')[1];
            resultItem = resultItem.strip(" \n");
            result.add(resultItem);
    filestream.close();
    return result;

def isCouchdbServerReachable(ip):
    url = createUrl(ip, COUCHDB_HTTP_PORT, "_all_dbs");
    try:
        executeShellCommand(["curl", "-X", "GET", url]);
    except Exception:
        return False;
    return True;

def waitUntilSelfIsReachable():
    ownIp = getOwnIp();
    for _ in range(1,11):
        if isCouchdbServerReachable(ownIp):
            return;
        time.sleep(1);
    raise Exception("Unable to reach couchdb server on own node");

initializeReplication();