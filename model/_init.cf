"""
    Copyright 2013 KU Leuven Research and Development - iMinds - Distrinet

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Administrative Contact: dnet-project-office@cs.kuleuven.be
    Technical Contact: arnaud.schoonjans@cs.kuleuven.be
"""

entity Cluster:
    """
        A couchdb cluster consisting of multiple servers
    """
end

entity Couchdb extends ip::services::Server:
    """
        Configure one couchdb server
    """
end

# TODO: Checken welke restricties er op de naam liggen => regexp maken
# Enkel toegestaan is: lowercase letters (a-z), digits (0-9), or any of the _$()+-/ characters
#typedef database_name as string matching /[0-9a-z_$()+-/]+/

entity Database:
    """
        A couchdb database has a certain  name
    """
    string name
end

Cluster cluster [0:1] -- [1:] Couchdb servers
Cluster cluster [0:1] -- [1:] Database databases

implementation couchdbServer:
    # Install package
    curl = std::Package(name = "curl", state = "installed", host = self.host)
    pkg = std::Package(name = "couchdb", state = "installed", host = self.host)
    # Set local.ini config file
    local_ini = std::ConfigFile(path = "/etc/couchdb/local.ini", content = template("couchdb/local.ini.tmpl"), 
			        host = self.host, mode=644, owner="couchdb", group="couchdb", requires = pkg, reload = true)
    # Start couchdb service
    couchdb_service = std::Service(host = self.host, name = "couchdb", state = "running", 
	onboot = "true", requires = [pkg, local_ini])
    # Write node file
    node_file = std::ConfigFile(path = "/etc/sysconfig/couchdb_nodes", content = template("couchdb/nodes.tmpl"), 
	                        mode=644, owner="couchdb", group="couchdb", host = self.host, reload = true)
    # Write databases file
    databases_file = std::ConfigFile(path = "/etc/sysconfig/couchdb_databases", content = template("couchdb/databases.tmpl"), 
                                     mode=644, owner="couchdb", group="couchdb", host = self.host, reload = true)
    # Write setup_replication script file
    setup_replication_script = std::File(host = self.host, path = "/usr/bin/setup_couchdb_replication", owner = "couchdb", group = "couchdb", 
	mode=755, content = file("couchdb/setup_replication"))
    # Write unit file for setup_replication script
    unit_file = std::File(host = self.host, path = "/lib/systemd/system/setup_couchdb_replication.service", owner = "root", 
	group = "root", mode=644, content = file("couchdb/setup_replication.service"))
    # Make setup_replication script a service
    setup_replication_service = std::Service(host = self.host, name = "setup_couchdb_replication", state = "running", onboot = true, 
	requires = [curl, unit_file, setup_replication_script, databases_file, node_file, couchdb_service])
end

implement Couchdb using couchdbServer
implement Cluster using std::none
implement Database using std::none
